{
  "openapi": "3.0.1",
  "info": {
    "title": "E-Commerce API",
    "version": "1.0.0",
    "description": "API for managing products, categories, orders, and carts. Auth0 JWT is required for all protected routes."
  },
  "servers": [
    {
      "url": "http://localhost:5001/api",
      "description": "Local REST API"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Paste your Auth0 access token here."
      }
    },
    "schemas": {
      "Product": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "price": {
            "type": "number",
            "format": "float"
          },
          "stock": {
            "type": "integer"
          },
          "category": {
            "type": "string"
          },
          "images": {
            "type": "string"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "OrderDetail": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "price": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number",
            "format": "float"
          },
          "status": {
            "type": "string"
          },
          "paymentMethod": {
            "type": "string",
            "enum": ["card"]
          },
          "shippingAddress": {
            "type": "string"
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderDetail"
            }
          }
        }
      },
      "Cart": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "productId": {
                  "type": "string"
                },
                "quantity": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "tags": [
    {
      "name": "Product",
      "description": "Operations related to products"
    },
    {
      "name": "Category",
      "description": "Operations related to categories"
    },
    {
      "name": "Order",
      "description": "Operations related to orders"
    },
    {
      "name": "Cart",
      "description": "Operations related to shopping cart"
    },
    {
      "name": "System",
      "description": "System-level endpoints like health check"
    }
  ],
  "paths": {
    "/product": {
      "get": {
        "summary": "Get all products",
        "tags": ["Product"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of products"
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "tags": ["Product"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Product created"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        }
      }
    },
    "/product/{id}": {
      "get": {
        "summary": "Get product by ID",
        "tags": ["Product"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the product to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product data"
          }
        }
      },
      "put": {
        "summary": "Update product by ID",
        "tags": ["Product"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product updated"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Product"
              }
            }
          }
        }
      }
    },
    "/category": {
      "get": {
        "summary": "Get all categories",
        "tags": ["Category"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories"
          }
        }
      },
      "post": {
        "summary": "Create a new category",
        "tags": ["Category"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Category created"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        }
      }
    },
    "/category/{id}": {
      "get": {
        "summary": "Get category by ID",
        "tags": ["Category"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the category to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category data"
          }
        }
      },
      "put": {
        "summary": "Update category by ID",
        "tags": ["Category"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get all orders for current user (or all if admin)",
        "description": "Retrieves orders for the authenticated user. Admins will see all orders.",
        "tags": ["Order"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Orders retrieved successfully"
          },
          "403": {
            "description": "Forbidden access"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary": "Get order by ID",
        "description": "Returns a specific order if it belongs to the current user, or if the user is an admin.",
        "tags": ["Order"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Order retrieved successfully"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "patch": {
        "summary": "Update order status",
        "description": "Allows an admin to update the status of an order (e.g., from pending to shipped).",
        "tags": ["Order"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the order to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "description": "New status for the order (e.g., pending, shipped, delivered)"
                  }
                },
                "required": ["status"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order status updated"
          },
          "403": {
            "description": "Only admin can perform this action"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/cart/{userId}": {
      "get": {
        "summary": "Get cart by user ID",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "User ID to retrieve cart for",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cart data"
          }
        }
      }
    },
    "/cart": {
      "post": {
        "summary": "Add item to the current user's cart",
        "description": "Adds a product to the authenticated user's cart. If no cart exists, it will be created.",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Item added to cart successfully"
          },
          "400": {
            "description": "Invalid product or quantity"
          },
          "404": {
            "description": "Product not found"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                },
                "required": ["productId", "quantity"]
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get current user's cart",
        "description": "Retrieves the authenticated user's cart with product details populated.",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cart data returned successfully"
          },
          "404": {
            "description": "Cart not found"
          }
        }
      }
    },
    "/cart/{id}": {
      "put": {
        "summary": "Update item quantity in current user's cart",
        "description": "Changes the quantity of a specific product in the cart. Requires the product ID and new quantity.",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Product ID of the cart item to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                },
                "required": ["productId", "quantity"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item quantity updated successfully"
          },
          "400": {
            "description": "Invalid request or insufficient stock"
          },
          "404": {
            "description": "Cart or item not found"
          }
        }
      },
      "delete": {
        "summary": "Remove item from current user's cart",
        "description": "Removes a specific item from the user's cart. Deletes the cart if it becomes empty.",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Product ID of the cart item to remove",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "productId": {
                    "type": "string"
                  }
                },
                "required": ["productId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item removed successfully"
          },
          "404": {
            "description": "Cart or item not found"
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check endpoint",
        "tags": ["System"],
        "responses": {
          "200": {
            "description": "API is running",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cart/buy": {
      "post": {
        "summary": "Checkout current user's cart",
        "description": "Converts the authenticated user's cart into an order and clears the cart. Fails if cart is empty or stock is insufficient.",
        "tags": ["Cart"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "shippingAddress": {
                    "type": "string"
                  }
                },
                "required": ["shippingAddress"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order successfully created from cart"
          },
          "400": {
            "description": "Cart is empty or product stock unavailable"
          }
        }
      }
    }
  }
}
